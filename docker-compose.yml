version: '2'
services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:3.0.0
    network_mode: host
    ports:
      - "32181:32181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:3.0.0
    network_mode: host
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092
      KAFKA_ZOOKEEPER_CONNECT: localhost:32181
  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:3.0.0
    network_mode: host
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: localhost:32181
      SCHEMA_REGISTRY_HOST_NAME: localhost
      SCHEMA_REGISTRY_LISTENERS: http://localhost:8081
  kafka-manager:
    container_name: kafka-manager
    image: sheepkiller/kafka-manager
    network_mode: host
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: localhost:32181
      APPLICATION_SECRET: letmein
  kafka-connect-avro:
    container_name: kafka-connect-avro
    image: confluentinc/cp-kafka-connect:3.0.0
    network_mode: host
    ports:
      - "28083:28083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: localhost:29092
      CONNECT_REST_PORT: 28083
      CONNECT_GROUP_ID: quickstart-avro
      CONNECT_CONFIG_STORAGE_TOPIC: quickstart-avro-config
      CONNECT_OFFSET_STORAGE_TOPIC: quickstart-avro-offsets
      CONNECT_STATUS_STORAGE_TOPIC: quickstart-avro-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://localhost:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://localhost:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: localhost
      CONNECT_ZOOKEEPER_CONNECT: localhost:32181
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
    volumes:
      - ./driver:/etc/kafka-connect/jars
  mysql:
    image: mysql
    container_name: mysql
    network_mode: host
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: confluent
      MYSQL_USER: confluent
      MYSQL_PASSWORD: confluent
      MYSQL_DATABASE: connect_test
#  scope:
#    container_name: weave-scope
#    volumes:
#      - "/var/run/:/var/run:rw"
#    command:
#      - "--probe.docker"
#      - "true"
#    image: weaveworks/scope:latest
#    net: "host"
#    pid: "host"
#    ports:
#      - "4040:4040"
#    privileged: true
#    tty: true
#    labels:
#      - "works.weave.role=system"
#  hdfs:
#    container_name: hdfs
#    image: sequenceiq/hadoop-docker:2.4.1
#    command: /etc/bootstrap.sh -d -bash
